---
import { getLangFromUrl, useTranslations } from '@/i18n/utils'
import { getI18N } from "@/i18n"
import Fujitsu from '@/components/icons/Fujitsu.astro'
import Codeko from '@/components/icons/Codeko.astro'
import type { JobData } from '@/types'
import Job from './Job.astro'
import ReactIcon from '@/components/icons/ReactIcon.astro'
import CSSIcon from '@/components/icons/CSSIcon.astro'
import JavaScriptIcon from '@/components/icons/JavaScriptIcon.astro'
import GitLabIcon from '@/components/icons/GitLabIcon.astro'
import TypeScriptIcon from '@/components/icons/TypeScriptIcon.astro'
import GitHubIcon from '@/components/icons/GitHubIcon.astro'
import ConfluenceIcon from '@/components/icons/ConfluenceIcon.astro'
import JenkinsIcon from '@/components/icons/JenkinsIcon.astro'
import JiraIcon from '@/components/icons/JiraIcon.astro'
import FigmaIcon from '@/components/icons/FirgmaIcon.astro'


const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

const companiesData : JobData[] = [
  {
    logo: Fujitsu,
    workstation: i18n.FULL_STACK,
    name: 'Fujitsu',
    startDate: i18n.AUGUST + ' 2022',
    description: i18n.FUJITSU_DESCRIPTION,
    additionalInfo: {
      text: i18n.FUJITSU_PROJECT + '...',
      externalLink: 'https://acortar.link/wd0eHM'
    },
    technologies: [
      {
        name: "React", 
        icon: ReactIcon,
        colors: "text-white bg-[#20232A]"
      },
      {
        name: "JavaScript",
        icon: JavaScriptIcon,
        colors: "text-white bg-[#F7DF1E80]"
      },
      {
        name: "CSS",
        icon: CSSIcon,
        colors: "text-white bg-[#1572B680]"
      },
      {
        name: "GitLab",
        icon: GitLabIcon,
        colors: "text-white bg-[#FC6D2680]"
      },
      {
        name: 'Confluence',
        icon: ConfluenceIcon,
        colors: "text-white bg-[#172B4D80]"
      },
      {
        name: 'Jenkins',
        icon: JenkinsIcon,
        colors: "text-white bg-[#D2493980]"
      },
      {
        name: 'Figma',
        icon: FigmaIcon,
        colors: "text-white bg-[#0ACF8380]"
      }
    ]
  },
  {
    logo: Codeko,
    workstation: i18n.FULL_STACK,
    name: 'Codeko',
    startDate: i18n.NOVEMBER + ' 2021',
    endDate: i18n.MAY + ' 2022',
    description: i18n.CODEKO_DESCRIPTION,
    technologies: [
      {
        name: "React", 
        icon: ReactIcon,
        colors: "text-white bg-[#20232A]"
      },
      {
        name: "JavaScript",
        icon: JavaScriptIcon,
        colors: "text-white bg-[#F7DF1E80]"
      },
      {
        name: "CSS",
        icon: CSSIcon,
        colors: "text-white bg-[#1572B680]"
      },
      {
        name: "React Native", 
        icon: ReactIcon,
        colors: "text-white bg-[#20232A]" 
      },
      {
        name: "TypeScript",
        icon: TypeScriptIcon,
        colors: "text-white bg-[#3178C680]"
      },
      {
        name: "GitHub",
        icon: GitHubIcon,
        colors: "text-white bg-[#18171780]"
      },
      {
        name: "Jira",
        icon: JiraIcon,
        colors: "text-white bg-[#0052CC80]"
      }
    ]
  } 
]
---

<div class="flex w-full flex-col md:w-[760px] lg:w-[960px]">
  <h1 class="text-3xl pl-4 md:pl-0 font-semibold uppercase text-headline-light dark:text-headline-dark">{t('nav.experience')}</h1>
  <div id="timeline" class="relative mt-6 mx-1 lg:mx-auto after:content-[''] after:absolute after:w-2 after:h-0 after:bg-cardBackground-light after:dark:text-headline-dark after:top-0 after:left-8 lg:after:left-1/2 after:-ml-1 after:-z-[1] after:rounded-xl ">
    <span id="showReference" class="absolute top-1/4 left-1/2"></span>
    {
    companiesData.map((companyData : JobData, index) => (
        <Job jobData={companyData} isRight={index % 2 === 0 ? false : true}/> 
    ))
    }
  </div>
</div>

<script>

//For the time being this will correctly work till 6 jobs :). If it happens, I will add more cases(note tailwind.config.mjs).
const delayVariants = {
  0: 'animation-delay-none',
  1: 'animation-delay-1000',
  2: 'animation-delay-2000',
  3: 'animation-delay-3000',
  4: 'animation-delay-4000',
  5: 'animation-delay-5000',
  6: 'animation-delay-6000',
}


const observer = new IntersectionObserver((entries) => {

  const entry = entries[0]
  
  if(entry.isIntersecting){
    const timeline= document.querySelector('#timeline')
    timeline.classList.add('after:animate-move-line')
  }

})


const timeline = document.querySelector('#showReference')
observer.observe(timeline)

</script>